_. Инициализацию любого проекта можно с npm
    npm init
    <настройка проекта>

    - обычно точка входа приложения - index.js, но в зависимости от либ/фв
        может быть другой файл

_. package.json хранит зависимости проекта
    - npm install <название пакета>

_. nodemon - лайв сервер (перезапускается при изменениях)
    - все пакеты хранятся в node_modules
    - в package.json - появляется поле dependencies / devDependencies
    - появляется package-lock.json - системный файл для оптимизации различных пакетов

    - чтобы не таскать с собой папку node_modules - можно удалить её, а с помощью
        package.json и команды npm install - восстановить все модули

_. в package.json есть секция scipts - автоматизация приложения





------
7.  node index - пример запуска приложения

    глобальный объект - __dirname - папка в которой идёт разработка (абсолютный путь)
    __filename - файл из которого запущен объект (абсолютный путь)

    Модули - для связи модлей между собой есть объект Module и свойство exports
    для подключения модулей используется функция require
    глобальные модули подключются как есть ("fs") , а собственные - через относительный путь    
    ("./user.js")

    -- для файла index.js
        // console.log("Hi");
        // console.log(__dirname);
        // console.log(__filename);

        const u = require("./user");

        console.log(u); // { name: 'Elena', age: 25 }
        u.sayHello();

        // в JS есть функции которые вызывают сами себя
        (function(require, module, exprots, __filename, __dirname){

        })();   // любой файл ля nodejs - nodejs оборачивает в такую функцию каждый модуль и получается
        // так:
        // (function(require, module, exprots, __filename, __dirname){
        //     const u = require("./user");

        //     console.log(u); // { name: 'Elena', age: 25 }
        //     u.sayHello();
        // })(); 

    -- для файла user.js
        const user = {
            name: "Elena",
            age: 25
        };

        // module.exports = user;


        //Можно заносить большее кол-во данных
        module.exports = {
            user: user,
            sayHello: function() {
                console.log("Hello");
            }
        }
8. С установкой Nodejs устанавливаются стандартные модули
    К примеру - PATH

9. Модуль FS

10. Модуль OS

11. Модуль Events

12. Модуль http (в index.js)

13. Чтобы не перезапускать сервер 100000 раз можно использовать nodemon
    В package.json добавляются скрипты
    "scripts": {
        "start": "node index.js",
        "dev": "nodemon index.js"
    },

    и тогда запускаем не node index.js а npm run dev

14. Создаём просто web-server

    (пока без фрэймворков и либ) 
    // Модуль http
    const http = require("http");



    const server = http.createServer((req, res) => {
        if(req.method === "GET") {
            // указываем content type
            res.writeHead(200, {
                "Content-Type":"text/html"  // тип контента - то как браузер воспринимает ответ
            });

            res.end(`
                <h1>Form</h1>
                <form method="post" action="/">
                    <input name="title" type="text" />
                    <button type="submit">Send</button>
                </form>
            `);
        } else if (req.method === "POST") {
            // echo
            // получим сообщение пользователя
            const body = [];    // тело запроса - массив 
            res.writeHead(200, {
                "Content-Type": "text/html; charset=utf-8" // тип ответа и кодировка
            });
            // chunk - порция данных/параметров
            // req - наследник EventEmitter, у него есть событие data - Buffer, тот самый
            req.on("data", (data) => {
                body.push(Buffer.from(data));   // записываем данные в массив
            });

            // по завершению передачи все данные будут в массиве body
            req.on("end", () => {
                //console.log(body.toString()); // title=Jeka
                const message = body.toString().split("=")[1];

                res.end(`
                    <h1>Ваше сообщение: ${message} </h1>
                `);

            });
        }
    });


    server.listen(3000, () => {
        console.log("Server is running...")
    });



    - видно, что не очень удобно, так как код громоздкий и 
    html занимает много места => надо делить

---
15. Внешний html + fs + PATH

16. Создание REST
    // испольузя fs и path - читаем файлы html и выдаём их по роутингу

    // Модуль http
    const http = require("http");
    const fs = require("fs");
    const path = require("path");



    const server = http.createServer((req, res) => {
        if(req.method === "GET") {
            // указываем content type
            res.writeHead(200, {
                "Content-Type":"text/html; charset=utf-8"  // тип контента - то как браузер воспринимает ответ
            });

            if (req.url === "/") {
                // index.html
                fs.readFile(
                    path.join(__dirname, "views", "index.html"),
                    "utf-8",
                    (err, content) => {
                        if (err) throw new Error(err);

                        res.end(content);
                    }
                );
            } else if (req.url === "/about") {
                // about.html
                fs.readFile(
                    path.join(__dirname, "views", "about.html"),
                    "utf-8",
                    (err, content) => {
                        if (err) throw new Error(err);

                        res.end(content);
                    }
                );
            } else if (req.url === "/api/users") {
                res.writeHead(200, {
                    "Content-Type":"text/json"
                });

                const users = [
                    {name:"Vlad", age: 25},
                    {name:"Elena", age: 23}
                ]

                res.end(JSON.stringify(users));
            }

        } else if (req.method === "POST") {

            const body = [];    // тело запроса - массив 
            res.writeHead(200, {
                "Content-Type": "text/html; charset=utf-8" // тип ответа и кодировка
            });

            req.on("data", (data) => {
                body.push(Buffer.from(data));   // записываем данные в массив
            });

            req.on("end", () => {
                const message = body.toString().split("=")[1];

                res.end(`
                    <h1>Ваше сообщение: ${message} </h1>
                `);
            });
        }
    });


    server.listen(3000, () => {
        console.log("Server is running...")
    });



17. Работа с консолью
    - process.argv[...] - хранит в себе аргументы запуска 
    приложения

    
----

18. Об Express

    - Вручную всё делать так себе, поэтому используем express

19. Роутинг + статический html

20. Рендер-движки, для динамических Views
    - pug   (без html вообще)
    - EJS   (встроен в express)
    - handlebars (сложнее, но вроде круче)
    эти трое можно использовать

    npm i express-handlebars

    - заменяем всю статику html на hbs 
    - создаём объект hbs, конфигурируем, задаём как рендер
    движок
    - создаём шаблон (layout)

21. через {{{ }}} регестрируем body
    через {{ }} регистрируем частичные представления

    выносим <head> в head.hbs - туда заносим подключение
    стилей через cdn

    добавляем {{ footer }} - туда добавляем скрипты CSS

22. Добавление навигации и статической папки со стилями
    
    // регистрация папки public как статической
    app.use(express.static("public"));

    use - middleware

23. Рендеринг данных

24. Регистрация роутов

25. Обработка форм

26. Модели

27. Работа с представлением

28. Подключение клиентских скриптов

29. динамисческие параметры

30. Редактирование курса

31. Подготовка корзины

32. Модель корзины

33. Шаблон корзины

34. Обработка асинхронных запросов (AJAX)

35. Динамическое изменение корзины

----

36. Подключение MongoDb
    Владилен использует MongoDb Atlas

37. Соединение с базой данных
    Mongoose
     npm install mongoose

38. первая замена модели под монгу и монгус

39 -

40. Переписываем модели

41. Возможность удаления курса

42. Модель пользователя
